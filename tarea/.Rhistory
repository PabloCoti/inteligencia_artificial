labs(title="Tamaño del pingûino Palmer Sation LTER",
subtitle="Longitud de aleta y Masa corporal para pingüinos Adelie, Chinstrap, Gentoo",
x="Longitud de aleta (mm)",
y="Masa corporal (g)",
color="Especie de pingüino",
shape="Especie de pingüino") +
theme_minimal()
geom_label(aes(x = species, y=n, label=n)) +
scale_fill_manual(values = c('darkorange', 'purple', 'cyan4')) +
labs(title="Tamaño del pingûino Palmer Sation LTER",
subtitle="Longitud de aleta y Masa corporal para pingüinos Adelie, Chinstrap, Gentoo",
x="Longitud de aleta (mm)",
y="Masa corporal (g)",
color="Especie de pingüino",
shape="Especie de pingüino") +
theme_minimal()
ggplot(data=penguins, aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(aes(color=species, shape=species), size=3, alpha=0.8) +
scale_color_manual(values = c('darkorange', 'purple', 'cyan4')) +
labs(title="Tmaño del pinguino, Palmer Station LTER",
subtitle = "Longitud de aleta y masa corporal para pingunos adelie, chinstrab, gentoo",
x = "Lognitud de aleta (mm)",
y = "Masa Corporarl (g)",
color = "Especie de pinguino",
shape = "Especie de pinguino") +
theme_minimal()
library(ggplot2)
# Cargar los datos
datos = penguins
# Filtrar filas con valores faltantes
datos_filtrados = datos %>%
filter(!is.na(bill_length_mm) & !is.na(bill_depth_mm) & !is.na(flipper_length_mm) & !is.na(body_mass_g))
# Carga de paquetes
library(tidyverse)
library(caret)
library(neuralnet)
library(palmerpenguins)
library(ggplot2)
# Cargar los datos
datos = penguins
# Filtrar filas con valores faltantes
datos_filtrados = datos %>%
filter(!is.na(bill_length_mm) & !is.na(bill_depth_mm) & !is.na(flipper_length_mm) & !is.na(body_mass_g))
# Separar en datos de entrenamiento y prueba
muestra = createDataPartition(datos_filtrados$species, p=0.001, list=F)
train = datos_filtrados[muestra,]
test = datos_filtrados[-muestra,]
# Entrenamiento de la red neuronal
red.neuronal = neuralnet(species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = train, hidden = c(3,3))
red.neuronal$act.fct
# Graficación de la red neuronal
plot(red.neuronal)
# Hacer predicciones
prediccion = predict(red.neuronal, test)
# Decodificar la columna que contiene el valor máximo
decodificarCol = apply(prediccion, 1, which.max)
# Crear una columna nueva con los valores decodificados
codificado = tibble(decodificarCol)
colnames(codificado) = "decodificarCol"
codificado = mutate(codificado, especie=recode(decodificarCol, "1"="Adelie", "2"="Chinstrap", "3"="Gentoo"))
test$Especie.Pred = codificado$especie
datos %>%
count(species)
datos %>%
group_by(species)
summarize(across(where(is.numeric()), mean, na.rm = TRUE))
# Carga de paquetes
library(tidyverse)
library(caret)
library(neuralnet)
library(palmerpenguins)
library(ggplot2)
# Cargar los datos
datos = penguins
# Filtrar filas con valores faltantes
datos_filtrados = datos %>%
filter(!is.na(bill_length_mm) & !is.na(bill_depth_mm) & !is.na(flipper_length_mm) & !is.na(body_mass_g))
# Separar en datos de entrenamiento y prueba
muestra = createDataPartition(datos_filtrados$species, p=0.001, list=F)
train = datos_filtrados[muestra,]
test = datos_filtrados[-muestra,]
# Entrenamiento de la red neuronal
red.neuronal = neuralnet(species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = train, hidden = c(3,3))
red.neuronal$act.fct
# Graficación de la red neuronal
plot(red.neuronal)
# Hacer predicciones
prediccion = predict(red.neuronal, test)
# Decodificar la columna que contiene el valor máximo
decodificarCol = apply(prediccion, 1, which.max)
# Crear una columna nueva con los valores decodificados
codificado = tibble(decodificarCol)
colnames(codificado) = "decodificarCol"
codificado = mutate(codificado, especie=recode(decodificarCol, "1"="Adelie", "2"="Chinstrap", "3"="Gentoo"))
test$Especie.Pred = codificado$especie
datos %>%
count(species)
datos %>%
group_by(species)
summarize(across(where(is.numeric()), mean, na.rm = TRUE))
ggplot(data=penguins, aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(aes(color=species, shape=species), size=3, alpha=0.8) +
scale_color_manual(values = c('darkorange', 'purple', 'cyan4')) +
labs(title="Tmaño del pinguino, Palmer Station LTER",
subtitle = "Longitud de aleta y masa corporal para pingunos adelie, chinstrab, gentoo",
x = "Lognitud de aleta (mm)",
y = "Masa Corporarl (g)",
color = "Especie de pinguino",
shape = "Especie de pinguino") +
theme_minimal()
ggplot(data=penguins, aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(aes(color=species, shape=species), size=3, alpha=0.8) +
scale_color_manual(values = c('darkorange', 'purple', 'cyan4')) +
labs(title="Tmaño del pinguino, Palmer Station LTER",
subtitle = "Longitud de aleta y masa corporal para pingunos adelie, chinstrab, gentoo",
x = "Lognitud de aleta (mm)",
y = "Masa Corporarl (g)",
color = "Especie de pinguino",
shape = "Especie de pinguino") +
theme_minimal()
ggplot(data=penguins, aes(x=flipper_length_mm, y=bill_length_mm)) +
geom_point(aes(color=species, shape=species), size=3, alpha=0.8) +
scale_color_manual(values = c('darkorange', 'purple', 'cyan4')) +
labs(title="Tmaño del pinguino, Palmer Station LTER",
subtitle = "Longitud de aleta y longitud de pico para pingunos adelie, chinstrab, gentoo",
x = "Lognitud de aleta (mm)",
y = "Longitud del pico (mm)",
color = "Especie de pinguino",
shape = "Especie de pinguino") +
theme_minimal()
# Carga de paquetes
library(tidyverse)
library(caret)
library(neuralnet)
library(palmerpenguins)
library(ggplot2)
# Cargar los datos
datos = penguins
# Filtrar filas con valores faltantes
datos_filtrados = datos %>%
filter(!is.na(bill_length_mm) & !is.na(bill_depth_mm) & !is.na(flipper_length_mm) & !is.na(body_mass_g))
# Separar en datos de entrenamiento y prueba
muestra = createDataPartition(datos_filtrados$species, p=0.001, list=F)
train = datos_filtrados[muestra,]
test = datos_filtrados[-muestra,]
# Entrenamiento de la red neuronal
red.neuronal = neuralnet(species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = train, hidden = c(3,3))
red.neuronal$act.fct
# Graficación de la red neuronal
plot(red.neuronal)
# Hacer predicciones
prediccion = predict(red.neuronal, test)
# Decodificar la columna que contiene el valor máximo
decodificarCol = apply(prediccion, 1, which.max)
# Crear una columna nueva con los valores decodificados
codificado = tibble(decodificarCol)
colnames(codificado) = "decodificarCol"
codificado = mutate(codificado, especie=recode(decodificarCol, "1"="Adelie", "2"="Chinstrap", "3"="Gentoo"))
test$Especie.Pred = codificado$especie
datos %>%
count(species)
datos %>%
group_by(species)
summarize(across(where(is.numeric()), mean, na.rm = TRUE))
# Carga de paquetes
library(tidyverse)
library(caret)
library(neuralnet)
library(palmerpenguins)
library(ggplot2)
# Cargar los datos
datos = penguins
# Filtrar filas con valores faltantes
datos_filtrados = datos %>%
filter(!is.na(bill_length_mm) & !is.na(bill_depth_mm) & !is.na(flipper_length_mm) & !is.na(body_mass_g))
# Separar en datos de entrenamiento y prueba
muestra = createDataPartition(datos_filtrados$species, p=0.001, list=F)
train = datos_filtrados[muestra,]
test = datos_filtrados[-muestra,]
# Entrenamiento de la red neuronal
red.neuronal = neuralnet(species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = train, hidden = c(3,3))
red.neuronal$act.fct
# Graficación de la red neuronal
plot(red.neuronal)
# Hacer predicciones
prediccion = predict(red.neuronal, test)
# Decodificar la columna que contiene el valor máximo
decodificarCol = apply(prediccion, 1, which.max)
# Crear una columna nueva con los valores decodificados
codificado = tibble(decodificarCol)
colnames(codificado) = "decodificarCol"
codificado = mutate(codificado, especie=recode(decodificarCol, "1"="Adelie", "2"="Chinstrap", "3"="Gentoo"))
test$Especie.Pred = codificado$especie
datos %>%
count(species)
datos %>%
group_by(species)
summarize(across(where(is.numeric()), mean, na.rm = TRUE))
# Carga de paquetes
library(tidyverse)
library(caret)
library(neuralnet)
library(palmerpenguins)
library(ggplot2)
# Cargar los datos
datos = penguins
# Filtrar filas con valores faltantes
datos_filtrados = datos %>%
filter(!is.na(bill_length_mm) & !is.na(bill_depth_mm) & !is.na(flipper_length_mm) & !is.na(body_mass_g))
# Separar en datos de entrenamiento y prueba
muestra = createDataPartition(datos_filtrados$species, p=0.001, list=F)
train = datos_filtrados[muestra,]
test = datos_filtrados[-muestra,]
# Entrenamiento de la red neuronal
red.neuronal = neuralnet(species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = train, hidden = c(3,3))
red.neuronal$act.fct
# Graficación de la red neuronal
plot(red.neuronal)
# Hacer predicciones
prediccion = predict(red.neuronal, test)
# Decodificar la columna que contiene el valor máximo
decodificarCol = apply(prediccion, 1, which.max)
# Crear una columna nueva con los valores decodificados
codificado = tibble(decodificarCol)
colnames(codificado) = "decodificarCol"
codificado = mutate(codificado, especie=recode(decodificarCol, "1"="Adelie", "2"="Chinstrap", "3"="Gentoo"))
test$Especie.Pred = codificado$especie
datos %>%
count(species)
datos %>%
group_by(species)
summarize(across(where(is.numeric()), mean, na.rm = TRUE))
2 rows containing missing values or values out
